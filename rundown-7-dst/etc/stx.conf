##
##  Rundown - Render Rundown Scripts for Teleprompting
##  Copyright (c) 2023-2025 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Licensed under GPL 3.0 <https://spdx.org/licenses/GPL-3.0-only>
##

#   build distribution archives and Docker container
build : archive:build docker:build

#   publish distribution archives and Docker container
publish : archive:publish docker:publish

#   build distribution archives
archive:build [hostname=en4.*]
    VERSION=`sed -n '/"version":/ s/.*: *"\(.*\)".*/\1/p' ../package.json` && \
    echo "++ building distribution archives for Rundown $VERSION ++" && \
    rm -rf dst-stage1 && \
    for TARGET in \
        "rundown-$VERSION" \
        "rundown-$VERSION-win-x64" \
        "rundown-$VERSION-win-a64" \
        "rundown-$VERSION-mac-x64" \
        "rundown-$VERSION-mac-a64" \
        "rundown-$VERSION-lnx-x64" \
        "rundown-$VERSION-lnx-a64"; do \
        mkdir -p dst-stage1/$TARGET && \
        cp -p ../rundown-1-doc/rundown-template.docx dst-stage1/$TARGET/ && \
        cp -p ../rundown-4-web/dst-stage2/rundown.zip dst-stage1/$TARGET/rundown-web.zip && \
        cp -p ../rundown-5-cli/dst-stage3/rundown.1 dst-stage1/$TARGET/rundown-cli.man && \
        cp -p ../rundown-6-brd/dst-stage3/rundown.1 dst-stage1/$TARGET/rundown-bridge.man; \
    done && \
    cp -p ../rundown-5-cli/dst-stage2/rundown.js                 dst-stage1/rundown-$VERSION/rundown-cli.js && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-win-x64.exe    dst-stage1/rundown-$VERSION-win-x64/rundown-cli.exe && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-win-a64.exe    dst-stage1/rundown-$VERSION-win-a64/rundown-cli.exe && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-mac-x64        dst-stage1/rundown-$VERSION-mac-x64/rundown-cli && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-mac-a64        dst-stage1/rundown-$VERSION-mac-a64/rundown-cli && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-lnx-x64        dst-stage1/rundown-$VERSION-lnx-x64/rundown-cli && \
    cp -p ../rundown-5-cli/dst-stage3/rundown-cli-lnx-a64        dst-stage1/rundown-$VERSION-lnx-a64/rundown-cli && \
    cp -p ../rundown-6-brd/dst-stage2/rundown.js                 dst-stage1/rundown-$VERSION/rundown-bridge.js && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-win-x64.exe dst-stage1/rundown-$VERSION-win-x64/rundown-bridge.exe && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-win-a64.exe dst-stage1/rundown-$VERSION-win-a64/rundown-bridge.exe && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-mac-x64     dst-stage1/rundown-$VERSION-mac-x64/rundown-bridge && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-mac-a64     dst-stage1/rundown-$VERSION-mac-a64/rundown-bridge && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-lnx-x64     dst-stage1/rundown-$VERSION-lnx-x64/rundown-bridge && \
    cp -p ../rundown-6-brd/dst-stage3/rundown-bridge-lnx-a64     dst-stage1/rundown-$VERSION-lnx-a64/rundown-bridge && \
    rm -rf dst-stage2 && \
    mkdir -p dst-stage2 && \
    cd dst-stage1 && \
    for TARGET in \
        "rundown-$VERSION" \
        "rundown-$VERSION-win-x64" \
        "rundown-$VERSION-win-a64" \
        "rundown-$VERSION-mac-x64" \
        "rundown-$VERSION-mac-a64" \
        "rundown-$VERSION-lnx-x64" \
        "rundown-$VERSION-lnx-a64"; do \
        zip -9 -r ../dst-stage2/$TARGET.zip $TARGET/; \
    done

#   publish distribution archives
archive:publish [hostname=en4.*]
    VERSION=`sed -n '/"version":/ s/.*: *"\(.*\)".*/\1/p' ../package.json` && \
    V=`echo "$VERSION" | sed -e 's;\.;\\.;g'` && \
    sed -n -e "/^${V} /, /^[0-9]\\./ { /^${V} /p; /^[0-9]\\./!p; }" <../CHANGELOG.md >.notes.md && \
    gh release create --title "Rundown $VERSION" --notes-file .notes.md --verify-tag $VERSION \
    dst-stage2/rundown-$VERSION.zip \
    dst-stage2/rundown-$VERSION-win-x64.zip \
    dst-stage2/rundown-$VERSION-win-a64.zip \
    dst-stage2/rundown-$VERSION-mac-x64.zip \
    dst-stage2/rundown-$VERSION-mac-a64.zip \
    dst-stage2/rundown-$VERSION-lnx-x64.zip \
    dst-stage2/rundown-$VERSION-lnx-a64.zip && \
    rm -f .notes.md

#   build Docker container
docker:build [hostname=en4.*]
    mkdir -p dst-stage1 && \
    cp -p ../rundown-5-cli/dst-stage2/rundown.js dst-stage1/rundown-cli.js && \
    cp -p ../rundown-6-brd/dst-stage2/rundown.js dst-stage1/rundown-bridge.js && \
    IMAGE_NAME=engelschall/rundown && \
    IMAGE_VERSION=`sed -n '/"version":/ s/.*: *"\(.*\)".*/\1/p' ../package.json` && \
    IMAGE_RELEASE=`date "+%Y%m%d"` && \
    echo "++ building Docker container image for Rundown $IMAGE_VERSION ($IMAGE_RELEASE) ++" && \
    docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --pull --no-cache --progress plain \
        -t "$IMAGE_NAME:$IMAGE_VERSION-$IMAGE_RELEASE" \
        -t "$IMAGE_NAME:$IMAGE_VERSION" \
        -t "$IMAGE_NAME:latest" \
        -f etc/docker-build.txt . && \
    docker image ls "$IMAGE_NAME:$IMAGE_VERSION-$IMAGE_RELEASE"

#   publish Docker container
docker:publish [hostname=en4.*]
    IMAGE_NAME=engelschall/rundown && \
    IMAGE_VERSION=`sed -n '/"version":/ s/.*: *"\(.*\)".*/\1/p' ../package.json` && \
    IMAGE_RELEASE=`date "+%Y%m%d"` && \
    echo "++ publishing Docker container image for Rundown $IMAGE_VERSION ($IMAGE_RELEASE) ++" && \
    docker push "$IMAGE_NAME:$IMAGE_VERSION-$IMAGE_RELEASE" && \
    docker push "$IMAGE_NAME:$IMAGE_VERSION" && \
    docker push "$IMAGE_NAME:latest"

#   start Docker container
docker:up
    docker compose -f etc/docker-compose.yaml up -d

#   stop Docker container
docker:down
    docker compose -f etc/docker-compose.yaml down

#   remove all generated artifacts (reverse of "npm start build")
clean
    shx rm -rf dst-stage1 dst-stage2

#   remove all generated artifacts (reverse of "npm install" and "npm start build")
clean:dist : clean
    shx rm -f package-lock.json && \
    shx rm -rf node_modules

