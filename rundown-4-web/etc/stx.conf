##
##  Rundown - Render Rundown Scripts for Teleprompting
##  Copyright (c) 2023-2025 Dr. Ralf S. Engelschall <rse@engelschall.com>
##  Licensed under GPL 3.0 <https://spdx.org/licenses/GPL-3.0-only>
##

#   (internal): create patch set for NPM dependencies
patch-make
    npm shrinkwrap && \
    patch-package --patch-dir package.d \
        "@typescript-eslint/typescript-estree" \
        htmllint-cli && \
    shx rm -f npm-shrinkwrap.json

#   (internal): apply patch set for NPM dependencies
patch-apply
    patch-package --patch-dir package.d

#   static code analysis (continuous file watching)
lint-watch
    nodemon --exec "npm start lint" --watch src --ext html,styl,js,ts,vue

#   static code analysis
lint : lint-vue-tsc lint-eslint lint-stylelint lint-htmllint

#   static code analysis (Vue language)
lint-vue-tsc
    vue-tsc --project etc/tsc-client.json --noEmit

#   static code analysis (TypeScript language)
lint-eslint
    eslint --config etc/eslint.mjs src/**/*.vue src/**/*.ts

#   static code analysis (CSS/Stylus languages)
lint-stylelint
    stylelint --config etc/stylelint.yaml src/**/*.styl src/**/*.vue

#   static code analysis (HTML language)
lint-htmllint
    htmllint --rc etc/htmllint.json src/**/*.html

#   build components for production
build
    npm start build-client

#   build components for development
build-dev
    npm start build-client-dev

#   build client components for production
build-client
    vite --config etc/vite-client.mts build --mode production

#   build client components for development
build-client-dev
    vite --config etc/vite-client.mts build --mode development

#   build client components for development (continuous file watching)
build-client-dev-watch
    cross-env NODE_OPTIONS="--max-old-space-size=4096" \
        vite --config etc/vite-client.mts build --mode development --watch

#   run server
server
    serve -d --listen 12345 --single dst

#   remove all development-only NPM dependencies
prune
    npm prune --omit=dev

#   remove all generated artifacts (reverse of "npm start build")
clean
    shx rm -rf dst-stage1 dst-stage2

#   remove all generated artifacts (reverse of "npm install" and "npm start build")
clean:dist : clean
    shx rm -f package-lock.json && \
    shx rm -rf node_modules

